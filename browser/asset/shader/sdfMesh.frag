
precision mediump float;

uniform float time;
uniform vec2 resolution;
uniform vec3 cameraPos, cameraTarget;

const float far = 20.;

#define repeat(p,r) (mod(p,r)-r/2.)
#define sdist(p,r) (length(p)-r)
// #define saturate(p) clamp(p,1.,0.)
float sdbox( vec3 p, vec3 b ) { vec3 d = abs(p) - b; return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)); }
float sdtorus( vec3 p, vec2 t ) { vec2 q = vec2(length(p.xz)-t.x,p.y); return length(q)-t.y; }
float smin (float a, float b, float r) { float h = clamp(.5+.5*(b-a)/r, 0., 1.); return mix(b, a, h)-r*h*(1.-h); }
void amod (inout vec2 p, float c) {
	float an = (3.1459*2.)/c;
	float a = atan(p.y,p.x)+an/2.;
	a = mod(a, an) - an/2.;
	p = vec2(cos(a), sin(a)) * length(p);
}
vec3 look (vec3 eye, vec3 target, vec2 anchor) {
	vec3 forward = normalize(target-eye);
	vec3 right = normalize(cross(forward, vec3(0,1,0)));
	vec3 up = normalize(cross(right, forward));
	return normalize(forward + right * anchor.x + up * anchor.y);
}

float dot2(in vec3 v) { return dot(v, v); }

float udTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {
	vec3 ba = b - a; vec3 pa = p - a;
	vec3 cb = c - b; vec3 pb = p - b;
	vec3 ac = a - c; vec3 pc = p - c;
	vec3 nor = cross(ba, ac);

	return sqrt(
		(sign(dot(cross(ba, nor), pa)) +
			sign(dot(cross(cb, nor), pb)) +
			sign(dot(cross(ac, nor), pc)) < 2.0)
		?
		min(min(
			dot2(ba*clamp(dot(ba, pa) / dot2(ba), 0.0, 1.0) - pa),
			dot2(cb*clamp(dot(cb, pb) / dot2(cb), 0.0, 1.0) - pb)),
			dot2(ac*clamp(dot(ac, pc) / dot2(ac), 0.0, 1.0) - pc))
		:
		dot(nor, pa)*dot(nor, pa) / dot2(nor));
}

mat2 r2d(float a) {
	float c = cos(a), s = sin(a);
	return mat2(c, s, -s, c);
}

int num_faces = 275;
vec3 vertices[] = vec3[](vec3(24.5959, 2.70443, -3.73241), vec3(25.0601, 4.59714, -1.28899), vec3(40.3782, 5.35422, -4.13965), vec3(24.5959, 6.86838, -3.32517), vec3(24.5959, 4.97568, -5.76859), vec3(25.0601, -4.86638, -4.13965), vec3(25.0601, -2.59513, -2.10346), vec3(40.8424, -2.21659, -4.95412), vec3(25.0601, -0.323891, -4.13965), vec3(24.5959, -2.21659, -6.17583), vec3(3.7076, 3.84006, -24.5015), vec3(10.2062, 8.38255, -24.0943), vec3(-0.470062, 8.38255, -24.5015), vec3(21.8108, 4.59714, -23.2798), vec3(18.0973, 11.7894, -22.8726), vec3(24.1317, 4.59714, -22.4653), vec3(-0.00587845, 8.00401, -20.4291), vec3(-2.79099, 8.00401, -20.0219), vec3(0.922493, 4.2186, -17.5785), vec3(6.02853, -9.78741, 5.2268), vec3(1.85086, -10.5445, 5.2268), vec3(1.85086, -6.38054, 8.4847), vec3(-3.71936, -8.27324, -14.3206), vec3(-6.96865, -10.923, -14.3206), vec3(-1.39843, -12.0587, -11.8772), vec3(-11.6105, -8.27324, -13.9133), vec3(-3.71936, -8.65179, -19.6147), vec3(-0.00587845, -4.86638, -17.5785), vec3(-0.00587845, 3.46152, -4.95412), vec3(0.922493, 0.0546494, -8.61926), vec3(4.63597, 0.0546494, -3.32517), vec3(8.34946, 7.62546, 1.15443), vec3(10.2062, 1.94735, -9.02649), vec3(18.5615, 8.76109, -4.54688), vec3(2.31505, -11.3016, -19.2074), vec3(-0.00587845, -12.0587, -17.5785), vec3(3.7076, -8.27324, -15.135), vec3(-10.218, -4.86638, -7.80478), vec3(-5.5761, 0.433189, -12.2844), vec3(-13.0031, -1.45951, -19.6147), vec3(4.17179, 6.86838, -0.474514), vec3(1.38668, 10.6538, 4.81957), vec3(17.6332, -9.78741, -21.2436), vec3(17.169, -7.13762, -19.6147), vec3(12.0629, -14.7084, -11.0627), vec3(13.4555, -17.7368, -11.8772), vec3(12.0629, -9.40887, -2.91794), vec3(6.02853, 9.89671, 5.2268), vec3(16.7048, 8.38255, 7.67023), vec3(1.38668, 7.24692, 8.4847), vec3(12.0629, 0.433189, 13.7788), vec3(-5.11192, 0.0546494, 4.41233), vec3(-0.934246, 12.1679, -4.54688), vec3(-0.470062, -9.03033, -24.5015), vec3(9.74201, -9.03033, -24.0943), vec3(3.7076, -4.86638, -24.0943), vec3(-10.6821, 3.84006, -8.61926), vec3(-7.43284, 7.62546, -4.13965), vec3(23.2034, -4.1093, -19.2074), vec3(24.5959, -5.62346, -22.8726), vec3(19.9541, -10.1659, -19.2074), vec3(-2.79099, 7.62546, -14.7278), vec3(-6.50447, 4.97568, -14.3206), vec3(-0.934246, 4.2186, -11.4699), vec3(25.0601, -7.51616, -0.88175), vec3(26.4527, 0.0546494, 3.19062), vec3(30.6303, 0.811729, -1.28899), vec3(3.24342, 4.97568, -19.2074), vec3(5.10016, 8.00401, -15.135), vec3(-6.50447, 9.89671, -14.7278), vec3(0.922493, 11.4109, -17.1712), vec3(5.10016, -8.65179, -13.5061), vec3(-1.39843, -4.86638, -11.4699), vec3(15.7764, -10.923, 4.41233), vec3(21.3466, -4.86638, -24.9087), vec3(5.56435, 8.00401, -13.5061), vec3(6.02853, -8.65179, -17.9857), vec3(6.49271, 8.38255, -18.3929), vec3(18.0973, -6.38054, -6.99031), vec3(8.34946, -7.8947, 1.15443), vec3(-0.934246, 11.4109, -11.8772), vec3(-6.04028, 8.38255, -10.2482), vec3(3.24342, 10.2752, -19.2074), vec3(-7.43284, -7.8947, -4.13965), vec3(-10.6821, 7.62546, -14.3206), vec3(2.77923, -12.8157, -24.5015), vec3(8.34946, -9.03033, -21.2436), vec3(16.2406, -0.702431, -23.687), vec3(11.5988, -8.65179, -22.8726), vec3(16.2406, -0.702431, -22.0581), vec3(2.77923, -5.62346, -19.2074), vec3(-0.470062, -8.65179, -20.4291), vec3(16.2406, -13.9514, -0.88175), vec3(8.81364, 8.38255, -21.2436), vec3(3.24342, 12.1679, -24.0943), vec3(-24.1435, -5.24492, -24.0943), vec3(-42.7109, -4.86638, -24.0943), vec3(-25.0719, -6.38054, -22.4653), vec3(-0.00587845, -4.48784, -4.13965), vec3(29.2378, 1.94735, -12.6916), vec3(-6.04028, -8.27324, -10.2482), vec3(-1.39843, 4.2186, -4.54688), vec3(-6.96865, -6.002, -14.3206), vec3(20.8825, -11.3016, -4.54688), vec3(6.9569, 8.00401, -4.13965), vec3(-13.9314, -4.1093, -16.3568), vec3(-0.470062, -3.35221, -4.54688), vec3(27.8452, -4.86638, -2.5107), vec3(25.0601, 6.1113, 1.56167), vec3(19.9541, -3.73075, -21.6508), vec3(-13.0031, -0.323891, -6.58307), vec3(-1.39843, -12.0587, -4.13965), vec3(6.49271, -8.65179, -4.13965), vec3(4.63597, -6.002, -0.0672779), vec3(12.9913, 14.0607, -17.5785), vec3(9.74201, 14.4392, -18.8002), vec3(11.5988, 8.76109, -22.8726), vec3(27.381, 6.48984, -1.69622), vec3(16.7048, -16.2226, -10.6554), vec3(13.9197, 12.1679, 1.15443), vec3(-15.7882, -1.83805, -14.3206), vec3(-25.5361, -4.48784, -21.2436), vec3(-15.324, 1.56881, -16.3568), vec3(-25.0719, -3.73075, -23.2798), vec3(17.169, -8.27324, -6.99031), vec3(19.4899, 14.4392, 4.00509), vec3(12.0629, 15.9534, -4.95412), vec3(14.848, 18.2246, -6.17583), vec3(9.27782, 12.925, -16.3568), vec3(19.4899, -7.8947, -17.1712), vec3(15.7764, -12.8157, -10.2482), vec3(18.5615, 10.2752, -2.91794), vec3(15.3122, 12.925, -6.58307), vec3(12.0629, 12.1679, -15.5423), vec3(23.6676, 11.4109, -0.0672779), vec3(18.0973, 15.9534, -7.39754), vec3(11.1346, 6.48984, -19.6147), vec3(24.5959, 4.59714, -24.0943), vec3(23.2034, 4.2186, -24.9087), vec3(14.3839, 7.24692, -17.9857), vec3(15.3122, 9.13963, -21.2436), vec3(14.848, -0.323891, -24.5015), vec3(13.9197, -1.08097, -22.4653), vec3(0));
ivec3 faces[] = ivec3[](ivec3(0, 1, 2), ivec3(2, 1, 3), ivec3(2, 3, 4), ivec3(4, 0, 2), ivec3(1, 0, 4), ivec3(4, 3, 1), ivec3(5, 6, 7), ivec3(7, 6, 8), ivec3(7, 8, 9), ivec3(9, 5, 7), ivec3(6, 5, 9), ivec3(9, 8, 6), ivec3(10, 11, 12), ivec3(13, 14, 15), ivec3(16, 17, 18), ivec3(19, 20, 21), ivec3(22, 23, 24), ivec3(25, 26, 27), ivec3(28, 29, 30), ivec3(31, 32, 33), ivec3(34, 35, 36), ivec3(37, 38, 39), ivec3(40, 31, 41), ivec3(42, 43, 44), ivec3(45, 44, 46), ivec3(47, 48, 49), ivec3(50, 21, 51), ivec3(40, 41, 52), ivec3(53, 54, 55), ivec3(56, 57, 51), ivec3(50, 49, 48), ivec3(58, 59, 60), ivec3(61, 62, 63), ivec3(64, 65, 66), ivec3(67, 18, 68), ivec3(61, 69, 70), ivec3(22, 71, 72), ivec3(73, 21, 50), ivec3(24, 71, 22), ivec3(59, 74, 42), ivec3(69, 61, 75), ivec3(76, 36, 27), ivec3(77, 68, 70), ivec3(78, 79, 19), ivec3(69, 80, 81), ivec3(82, 70, 17), ivec3(20, 83, 21), ivec3(84, 81, 63), ivec3(55, 54, 85), ivec3(68, 77, 67), ivec3(86, 85, 34), ivec3(53, 85, 54), ivec3(70, 82, 77), ivec3(87, 88, 89), ivec3(85, 86, 54), ivec3(86, 76, 90), ivec3(55, 54, 86), ivec3(55, 90, 91), ivec3(27, 90, 76), ivec3(75, 80, 69), ivec3(92, 73, 64), ivec3(93, 10, 67), ivec3(17, 16, 82), ivec3(10, 93, 11), ivec3(94, 93, 77), ivec3(95, 96, 97), ivec3(93, 94, 11), ivec3(94, 82, 16), ivec3(37, 83, 98), ivec3(12, 11, 94), ivec3(78, 99, 32), ivec3(100, 24, 23), ivec3(34, 76, 86), ivec3(28, 101, 57), ivec3(80, 52, 57), ivec3(102, 72, 100), ivec3(45, 92, 103), ivec3(63, 101, 104), ivec3(12, 16, 67), ivec3(105, 39, 95), ivec3(41, 31, 47), ivec3(23, 25, 100), ivec3(90, 27, 26), ivec3(30, 29, 106), ivec3(63, 75, 61), ivec3(33, 32, 99), ivec3(83, 100, 72), ivec3(29, 28, 56), ivec3(99, 78, 107), ivec3(47, 49, 41), ivec3(64, 73, 50), ivec3(108, 65, 50), ivec3(17, 84, 62), ivec3(81, 57, 101), ivec3(98, 72, 71), ivec3(53, 91, 34), ivec3(52, 104, 40), ivec3(42, 74, 109), ivec3(43, 109, 58), ivec3(32, 31, 40), ivec3(51, 110, 56), ivec3(91, 26, 35), ivec3(62, 61, 68), ivec3(57, 81, 80), ivec3(25, 23, 35), ivec3(104, 101, 28), ivec3(36, 22, 102), ivec3(41, 57, 52), ivec3(28, 40, 104), ivec3(19, 21, 73), ivec3(70, 69, 84), ivec3(40, 30, 32), ivec3(81, 84, 69), ivec3(35, 34, 91), ivec3(111, 24, 100), ivec3(112, 111, 20), ivec3(67, 77, 93), ivec3(104, 75, 63), ivec3(100, 83, 111), ivec3(100, 25, 102), ivec3(21, 83, 51), ivec3(113, 79, 32), ivec3(63, 62, 84), ivec3(75, 104, 52), ivec3(50, 65, 64), ivec3(16, 12, 94), ivec3(36, 35, 23), ivec3(112, 113, 106), ivec3(71, 112, 98), ivec3(30, 40, 28), ivec3(37, 106, 29), ivec3(24, 111, 112), ivec3(68, 18, 62), ivec3(114, 115, 116), ivec3(108, 33, 117), ivec3(33, 99, 117), ivec3(66, 65, 108), ivec3(34, 85, 53), ivec3(99, 66, 117), ivec3(42, 45, 118), ivec3(50, 48, 108), ivec3(51, 49, 50), ivec3(23, 22, 36), ivec3(35, 26, 25), ivec3(49, 51, 57), ivec3(57, 56, 28), ivec3(91, 53, 55), ivec3(92, 46, 19), ivec3(20, 111, 83), ivec3(33, 119, 47), ivec3(66, 108, 117), ivec3(72, 98, 83), ivec3(52, 80, 75), ivec3(90, 55, 86), ivec3(20, 113, 112), ivec3(37, 51, 83), ivec3(78, 64, 107), ivec3(64, 66, 107), ivec3(32, 30, 113), ivec3(66, 99, 107), ivec3(101, 63, 81), ivec3(102, 27, 36), ivec3(20, 19, 79), ivec3(26, 91, 90), ivec3(62, 18, 17), ivec3(67, 10, 12), ivec3(113, 20, 79), ivec3(98, 106, 37), ivec3(70, 68, 61), ivec3(77, 82, 94), ivec3(27, 102, 25), ivec3(106, 98, 112), ivec3(51, 37, 110), ivec3(41, 49, 57), ivec3(106, 113, 30), ivec3(78, 32, 79), ivec3(84, 17, 70), ivec3(112, 71, 24), ivec3(36, 76, 34), ivec3(72, 102, 22), ivec3(18, 67, 16), ivec3(29, 38, 37), ivec3(56, 38, 29), ivec3(103, 64, 78), ivec3(105, 110, 37), ivec3(97, 120, 105), ivec3(96, 121, 97), ivec3(110, 120, 122), ivec3(120, 121, 123), ivec3(96, 123, 121), ivec3(38, 56, 122), ivec3(39, 122, 123), ivec3(123, 96, 95), ivec3(118, 103, 124), ivec3(119, 125, 48), ivec3(126, 127, 125), ivec3(128, 115, 127), ivec3(43, 129, 130), ivec3(119, 33, 131), ivec3(132, 126, 119), ivec3(133, 128, 126), ivec3(44, 130, 124), ivec3(131, 33, 108), ivec3(132, 131, 134), ivec3(133, 132, 135), ivec3(46, 124, 78), ivec3(134, 108, 48), ivec3(135, 134, 125), ivec3(114, 135, 127), ivec3(60, 118, 130), ivec3(115, 128, 136), ivec3(60, 129, 58), ivec3(58, 15, 137), ivec3(42, 60, 59), ivec3(59, 137, 138), ivec3(109, 43, 42), ivec3(138, 14, 13), ivec3(58, 129, 43), ivec3(133, 139, 136), ivec3(116, 140, 114), ivec3(141, 88, 87), ivec3(136, 116, 115), ivec3(142, 88, 141), ivec3(136, 128, 133), ivec3(89, 88, 142), ivec3(139, 133, 114), ivec3(39, 105, 37), ivec3(44, 45, 42), ivec3(46, 92, 45), ivec3(114, 140, 139), ivec3(64, 103, 92), ivec3(103, 118, 45), ivec3(95, 97, 105), ivec3(118, 60, 42), ivec3(19, 73, 92), ivec3(78, 124, 103), ivec3(110, 105, 120), ivec3(120, 97, 121), ivec3(122, 56, 110), ivec3(123, 122, 120), ivec3(122, 39, 38), ivec3(123, 95, 39), ivec3(124, 130, 118), ivec3(48, 47, 119), ivec3(125, 119, 126), ivec3(127, 126, 128), ivec3(130, 44, 43), ivec3(31, 33, 47), ivec3(119, 131, 132), ivec3(126, 132, 133), ivec3(124, 46, 44), ivec3(108, 134, 131), ivec3(134, 135, 132), ivec3(135, 114, 133), ivec3(78, 19, 46), ivec3(48, 125, 134), ivec3(125, 127, 135), ivec3(127, 115, 114), ivec3(130, 129, 60), ivec3(141, 87, 140), ivec3(89, 139, 140), ivec3(142, 136, 139), ivec3(142, 141, 116), ivec3(14, 138, 137), ivec3(13, 109, 74), ivec3(14, 137, 15), ivec3(15, 58, 109), ivec3(137, 59, 58), ivec3(138, 74, 59), ivec3(140, 116, 141), ivec3(140, 87, 89), ivec3(139, 89, 142), ivec3(116, 136, 142), ivec3(74, 138, 13), ivec3(109, 13, 15), ivec3(0));

float de(vec3 p) {
	p.xz *= r2d(iTime);

	p.zy *= r2d(3.14 * .5);

	float d = 1e6;
	for (int i = 0; i < num_faces; i++) {
		d = min(d, udTriangle(p, vertices[faces[i].x], vertices[faces[i].y], vertices[faces[i].z]));
	}
	return d;
}

void main () {
	vec2 uv = (gl_FragCoord.xy-.5*resolution.xy)/resolution.y;

	vec3 ro = vec3(0, -10, -56);
	vec3 rd = normalize(vec3(uv, 1));
	vec3 p;

	float t = 0., ri;
	float tmax = 90.;
	for (float i = 0.; i < 1.; i += .01) {
		ri = i;
		p = ro + rd * t;
		float d = de(p);
		if (d < .001 || t > tmax) break;
		t += d;
	}

	vec3 bg = vec3(.1, .1, .12);
	vec3 c = bg;
	if (t <= tmax) {
		c = mix(vec3(.9, .3, .3), vec3(.1, .2, .1), ri);
	}

	gl_FragColor = vec4(c, 1);
}
